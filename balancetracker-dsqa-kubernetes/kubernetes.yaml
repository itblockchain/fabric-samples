apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ca
    name: ca
  spec:
    ports:
    - name: "7054"
      port: 7054
      targetPort: 7054
    selector:
      io.kompose.service: ca
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: couchdb0
    name: couchdb0
  spec:
    ports:
    - name: "5984"
      port: 5984
      targetPort: 5984
    selector:
      io.kompose.service: couchdb0
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: couchdb1
    name: couchdb1
  spec:
    ports:
    - name: "5985"
      port: 5985
      targetPort: 5984
    selector:
      io.kompose.service: couchdb1
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: explorer
    name: explorer
  spec:
    ports:
    - name: "8090"
      port: 8090
      targetPort: 8080
    selector:
      io.kompose.service: explorer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer
    name: orderer
  spec:
    ports:
    - name: "7050"
      port: 7050
      targetPort: 7050
    selector:
      io.kompose.service: orderer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1
    name: orderer1
  spec:
    ports:
    - name: "7060"
      port: 7060
      targetPort: 7050
    selector:
      io.kompose.service: orderer1
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2
    name: orderer2
  spec:
    ports:
    - name: "7070"
      port: 7070
      targetPort: 7050
    selector:
      io.kompose.service: orderer2
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: peer0
    name: peer0
  spec:
    ports:
    - name: "7051"
      port: 7051
      targetPort: 7051
    - name: "7053"
      port: 7053
      targetPort: 7053
    selector:
      io.kompose.service: peer0
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: peer1
    name: peer1
  spec:
    ports:
    - name: "7061"
      port: 7061
      targetPort: 7051
    - name: "7063"
      port: 7063
      targetPort: 7053
    selector:
      io.kompose.service: peer1
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: ca
    name: ca
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: ca
      spec:
        containers:
        - args:
          - sh
          - -c
          - fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
            --ca.keyfile /etc/hyperledger/fabric-ca-server-config/e34f0a618a80d018305c69dd5f737a4a5c5fe5646dae14ce71fe5964bdd0cbc8_sk
            -b Interticket:Blockchain4ever
          env:
          - name: FABRIC_CA_HOME
            value: /etc/hyperledger/fabric-ca-server
          - name: FABRIC_CA_SERVER_CA_CERTFILE
            value: /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
          - name: FABRIC_CA_SERVER_CA_KEYFILE
            value: /etc/hyperledger/fabric-ca-server-config/e34f0a618a80d018305c69dd5f737a4a5c5fe5646dae14ce71fe5964bdd0cbc8_sk
          - name: FABRIC_CA_SERVER_CA_NAME
            value: ca
          - name: FABRIC_CA_SERVER_CSR_HOSTS
            value: localhost
          - name: FABRIC_CA_SERVER_TLS_ENABLED
            value: "true"
          image: hyperledger/fabric-ca
          name: ca
          ports:
          - containerPort: 7054
          resources: {}
          volumeMounts:
          - mountPath: /etc/hyperledger/fabric-ca-server-config
            name: ca-claim0
          - mountPath: /scripts
            name: ca-claim1
        restartPolicy: Always
        volumes:
        - name: ca-claim0
          persistentVolumeClaim:
            claimName: ca-claim0
        - name: ca-claim1
          persistentVolumeClaim:
            claimName: ca-claim1
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: ca-claim0
    name: ca-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: ca-claim1
    name: ca-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: cli
    name: cli
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: cli
      spec:
        containers:
        - args:
          - /bin/bash
          env:
          - name: CORE_CHAINCODE_KEEPALIVE
            value: "10"
          - name: CORE_PEER_ADDRESS
            value: peer0:7051
          - name: CORE_PEER_ID
            value: cli
          - name: CORE_PEER_LOCALMSPID
            value: Org1MSP
          - name: CORE_PEER_MSPCONFIGPATH
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
          - name: CORE_PEER_TLS_CERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
          - name: CORE_PEER_TLS_ENABLED
            value: "true"
          - name: CORE_PEER_TLS_KEY_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
          - name: CORE_PEER_TLS_ROOTCERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
          - name: CORE_VM_ENDPOINT
            value: unix:///host/var/run/docker.sock
          - name: FABRIC_LOGGING_SPEC
            value: info
          - name: GOPATH
            value: /opt/gopath
          image: hyperledger/fabric-tools
          name: cli
          resources: {}
          tty: true
          volumeMounts:
          - mountPath: /host/var/run/
            name: cli-claim0
          - mountPath: /opt/gopath/src/github.com/
            name: cli-claim1
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: cli-claim2
          - mountPath: /opt/gopath/src/github.com/chaincode/
            name: cli-claim3
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
            name: cli-claim4
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        restartPolicy: Always
        volumes:
        - name: cli-claim0
          persistentVolumeClaim:
            claimName: cli-claim0
        - name: cli-claim1
          persistentVolumeClaim:
            claimName: cli-claim1
        - name: cli-claim2
          persistentVolumeClaim:
            claimName: cli-claim2
        - name: cli-claim3
          persistentVolumeClaim:
            claimName: cli-claim3
        - name: cli-claim4
          persistentVolumeClaim:
            claimName: cli-claim4
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: cli-claim0
    name: cli-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: cli-claim1
    name: cli-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: cli-claim2
    name: cli-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: cli-claim3
    name: cli-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: cli-claim4
    name: cli-claim4
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: couchdb0
    name: couchdb0
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: couchdb0
      spec:
        containers:
        - env:
          - name: COUCHDB_PASSWORD
            value: Blockchain4ever
          - name: COUCHDB_USER
            value: Blockchain
          image: hyperledger/fabric-couchdb
          name: couchdb0
          ports:
          - containerPort: 5984
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: couchdb1
    name: couchdb1
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: couchdb1
      spec:
        containers:
        - env:
          - name: COUCHDB_PASSWORD
            value: Blockchain4ever
          - name: COUCHDB_USER
            value: Blockchain
          image: hyperledger/fabric-couchdb
          name: couchdb1
          ports:
          - containerPort: 5984
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: explorer
    name: explorer
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: explorer
      spec:
        containers:
        - args:
          - sh
          - -c
          - sleep 16&& node /opt/explorer/main.js && tail -f /dev/null
          env:
          - name: DATABASE_HOST
            value: explorerdb
          - name: DATABASE_PASSWD
            value: password
          - name: DATABASE_USERNAME
            value: hppoc
          - name: DISCOVERY_AS_LOCALHOST
            value: "false"
          image: hyperledger/explorer:latest
          name: explorer
          ports:
          - containerPort: 8080
          resources: {}
          volumeMounts:
          - mountPath: /opt/explorer/app/platform/fabric/config.json
            name: explorer-claim0
          - mountPath: /opt/explorer/app/platform/fabric/connection-profile
            name: explorer-claim1
          - mountPath: /tmp/crypto
            name: explorer-claim2
          - mountPath: /opt/wallet
            name: walletstore
        hostname: explorer
        restartPolicy: Always
        volumes:
        - name: explorer-claim0
          persistentVolumeClaim:
            claimName: explorer-claim0
        - name: explorer-claim1
          persistentVolumeClaim:
            claimName: explorer-claim1
        - name: explorer-claim2
          persistentVolumeClaim:
            claimName: explorer-claim2
        - name: walletstore
          persistentVolumeClaim:
            claimName: walletstore
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: explorer-claim0
    name: explorer-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: explorer-claim1
    name: explorer-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: explorer-claim2
    name: explorer-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: walletstore
    name: walletstore
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: explorerdb
    name: explorerdb
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: explorerdb
      spec:
        containers:
        - env:
          - name: DATABASE_DATABASE
            value: fabricexplorer
          - name: DATABASE_PASSWORD
            value: password
          - name: DATABASE_USERNAME
            value: hppoc
          image: hyperledger/explorer-db:latest
          name: explorerdb
          resources: {}
          volumeMounts:
          - mountPath: /docker-entrypoint-initdb.d/createdb.sh
            name: explorerdb-claim0
          - mountPath: /var/lib/postgresql/data
            name: pgdata
        hostname: explorerdb
        restartPolicy: Always
        volumes:
        - name: explorerdb-claim0
          persistentVolumeClaim:
            claimName: explorerdb-claim0
        - name: pgdata
          persistentVolumeClaim:
            claimName: pgdata
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: explorerdb-claim0
    name: explorerdb-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: pgdata
    name: pgdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer
    name: orderer
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: orderer
      spec:
        containers:
        - args:
          - orderer
          env:
          - name: FABRIC_LOGGING_SPEC
            value: info
          - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
          - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
          - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
          - name: ORDERER_GENERAL_GENESISFILE
            value: /etc/hyperledger/configtx/genesis.block
          - name: ORDERER_GENERAL_GENESISMETHOD
            value: file
          - name: ORDERER_GENERAL_LISTENADDRESS
            value: 0.0.0.0
          - name: ORDERER_GENERAL_LOCALMSPDIR
            value: /etc/hyperledger/msp/orderer/msp
          - name: ORDERER_GENERAL_LOCALMSPID
            value: OrdererMSP
          - name: ORDERER_GENERAL_TLS_CERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
          - name: ORDERER_GENERAL_TLS_ENABLED
            value: "true"
          - name: ORDERER_GENERAL_TLS_PRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
          - name: ORDERER_GENERAL_TLS_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
          - name: ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR
            value: "1"
          - name: ORDERER_KAFKA_VERBOSE
            value: "true"
          image: hyperledger/fabric-orderer
          name: orderer
          ports:
          - containerPort: 7050
          resources: {}
          volumeMounts:
          - mountPath: /etc/hyperledger/configtx
            name: orderer-claim0
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: orderer-claim1
          - mountPath: /etc/hyperledger/msp/orderer
            name: orderer-claim2
          - mountPath: /etc/hyperledger/msp/peerOrg1
            name: orderer-claim3
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
        restartPolicy: Always
        volumes:
        - name: orderer-claim0
          persistentVolumeClaim:
            claimName: orderer-claim0
        - name: orderer-claim1
          persistentVolumeClaim:
            claimName: orderer-claim1
        - name: orderer-claim2
          persistentVolumeClaim:
            claimName: orderer-claim2
        - name: orderer-claim3
          persistentVolumeClaim:
            claimName: orderer-claim3
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer-claim0
    name: orderer-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer-claim1
    name: orderer-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer-claim2
    name: orderer-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer-claim3
    name: orderer-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1
    name: orderer1
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: orderer1
      spec:
        containers:
        - args:
          - orderer
          env:
          - name: FABRIC_LOGGING_SPEC
            value: info
          - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
          - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.key
          - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/ca.crt
          - name: ORDERER_GENERAL_GENESISFILE
            value: /etc/hyperledger/configtx/genesis.block
          - name: ORDERER_GENERAL_GENESISMETHOD
            value: file
          - name: ORDERER_GENERAL_LISTENADDRESS
            value: 0.0.0.0
          - name: ORDERER_GENERAL_LOCALMSPDIR
            value: /etc/hyperledger/msp/orderer/msp
          - name: ORDERER_GENERAL_LOCALMSPID
            value: OrdererMSP
          - name: ORDERER_GENERAL_TLS_CERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt
          - name: ORDERER_GENERAL_TLS_ENABLED
            value: "true"
          - name: ORDERER_GENERAL_TLS_PRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.key
          - name: ORDERER_GENERAL_TLS_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/ca.crt
          - name: ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR
            value: "1"
          - name: ORDERER_KAFKA_VERBOSE
            value: "true"
          image: hyperledger/fabric-orderer
          name: orderer1
          ports:
          - containerPort: 7050
          resources: {}
          volumeMounts:
          - mountPath: /etc/hyperledger/configtx
            name: orderer1-claim0
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: orderer1-claim1
          - mountPath: /etc/hyperledger/msp/orderer
            name: orderer1-claim2
          - mountPath: /etc/hyperledger/msp/peerOrg1
            name: orderer1-claim3
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
        restartPolicy: Always
        volumes:
        - name: orderer1-claim0
          persistentVolumeClaim:
            claimName: orderer1-claim0
        - name: orderer1-claim1
          persistentVolumeClaim:
            claimName: orderer1-claim1
        - name: orderer1-claim2
          persistentVolumeClaim:
            claimName: orderer1-claim2
        - name: orderer1-claim3
          persistentVolumeClaim:
            claimName: orderer1-claim3
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1-claim0
    name: orderer1-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1-claim1
    name: orderer1-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1-claim2
    name: orderer1-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer1-claim3
    name: orderer1-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2
    name: orderer2
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: orderer2
      spec:
        containers:
        - args:
          - orderer
          env:
          - name: FABRIC_LOGGING_SPEC
            value: info
          - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
          - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key
          - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/ca.crt
          - name: ORDERER_GENERAL_GENESISFILE
            value: /etc/hyperledger/configtx/genesis.block
          - name: ORDERER_GENERAL_GENESISMETHOD
            value: file
          - name: ORDERER_GENERAL_LISTENADDRESS
            value: 0.0.0.0
          - name: ORDERER_GENERAL_LOCALMSPDIR
            value: /etc/hyperledger/msp/orderer/msp
          - name: ORDERER_GENERAL_LOCALMSPID
            value: OrdererMSP
          - name: ORDERER_GENERAL_TLS_CERTIFICATE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
          - name: ORDERER_GENERAL_TLS_ENABLED
            value: "true"
          - name: ORDERER_GENERAL_TLS_PRIVATEKEY
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key
          - name: ORDERER_GENERAL_TLS_ROOTCAS
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/ca.crt
          - name: ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR
            value: "1"
          - name: ORDERER_KAFKA_VERBOSE
            value: "true"
          image: hyperledger/fabric-orderer
          name: orderer2
          ports:
          - containerPort: 7050
          resources: {}
          volumeMounts:
          - mountPath: /etc/hyperledger/configtx
            name: orderer2-claim0
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: orderer2-claim1
          - mountPath: /etc/hyperledger/msp/orderer
            name: orderer2-claim2
          - mountPath: /etc/hyperledger/msp/peerOrg1
            name: orderer2-claim3
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
        restartPolicy: Always
        volumes:
        - name: orderer2-claim0
          persistentVolumeClaim:
            claimName: orderer2-claim0
        - name: orderer2-claim1
          persistentVolumeClaim:
            claimName: orderer2-claim1
        - name: orderer2-claim2
          persistentVolumeClaim:
            claimName: orderer2-claim2
        - name: orderer2-claim3
          persistentVolumeClaim:
            claimName: orderer2-claim3
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2-claim0
    name: orderer2-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2-claim1
    name: orderer2-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2-claim2
    name: orderer2-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: orderer2-claim3
    name: orderer2-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: peer0
    name: peer0
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: peer0
      spec:
        containers:
        - args:
          - peer
          - node
          - start
          env:
          - name: CORE_CHAINCODE_DEPLOYTIMEOUT
            value: 300s
          - name: CORE_CHAINCODE_EXECUTETIMEOUT
            value: 300s
          - name: CORE_CHAINCODE_LOGGING_LEVEL
            value: info
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
            value: couchdb0:5984
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
            value: Blockchain4ever
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME
            value: Blockchain
          - name: CORE_LEDGER_STATE_STATEDATABASE
            value: CouchDB
          - name: CORE_PEER_ADDRESS
            value: peer0:7051
          - name: CORE_PEER_GOSSIP_BOOTSTRAP
            value: peer0:7051
          - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
            value: peer0:7051
          - name: CORE_PEER_ID
            value: peer0
          - name: CORE_PEER_LOCALMSPID
            value: Org1MSP
          - name: CORE_PEER_MSPCONFIGPATH
            value: /etc/hyperledger/msp/peer/
          - name: CORE_PEER_TLS_CERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
          - name: CORE_PEER_TLS_ENABLED
            value: "true"
          - name: CORE_PEER_TLS_KEY_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
          - name: CORE_PEER_TLS_ROOTCERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
          - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
            value: net_basic
          - name: CORE_VM_ENDPOINT
            value: unix:///host/var/run/docker.sock
          - name: FABRIC_LOGGING_SPEC
            value: info
          image: hyperledger/fabric-peer
          name: peer0
          ports:
          - containerPort: 7051
          - containerPort: 7053
          resources: {}
          volumeMounts:
          - mountPath: /host/var/run/
            name: peer0-claim0
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: peer0-claim1
          - mountPath: /etc/hyperledger/msp/peer
            name: peer0-claim2
          - mountPath: /etc/hyperledger/msp/users
            name: peer0-claim3
          - mountPath: /etc/hyperledger/configtx
            name: peer0-claim4
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric
        restartPolicy: Always
        volumes:
        - name: peer0-claim0
          persistentVolumeClaim:
            claimName: peer0-claim0
        - name: peer0-claim1
          persistentVolumeClaim:
            claimName: peer0-claim1
        - name: peer0-claim2
          persistentVolumeClaim:
            claimName: peer0-claim2
        - name: peer0-claim3
          persistentVolumeClaim:
            claimName: peer0-claim3
        - name: peer0-claim4
          persistentVolumeClaim:
            claimName: peer0-claim4
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer0-claim0
    name: peer0-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer0-claim1
    name: peer0-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer0-claim2
    name: peer0-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer0-claim3
    name: peer0-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer0-claim4
    name: peer0-claim4
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubernetes.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: peer1
    name: peer1
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: peer1
      spec:
        containers:
        - args:
          - peer
          - node
          - start
          env:
          - name: CORE_CHAINCODE_DEPLOYTIMEOUT
            value: 300s
          - name: CORE_CHAINCODE_EXECUTETIMEOUT
            value: 300s
          - name: CORE_CHAINCODE_LOGGING_LEVEL
            value: info
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
            value: couchdb1:5984
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
            value: Blockchain4ever
          - name: CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME
            value: Blockchain
          - name: CORE_LEDGER_STATE_STATEDATABASE
            value: CouchDB
          - name: CORE_PEER_ADDRESS
            value: peer1:7051
          - name: CORE_PEER_GOSSIP_BOOTSTRAP
            value: peer1:7051
          - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
            value: peer1:7051
          - name: CORE_PEER_ID
            value: peer0
          - name: CORE_PEER_LOCALMSPID
            value: Org1MSP
          - name: CORE_PEER_MSPCONFIGPATH
            value: /etc/hyperledger/msp/peer/
          - name: CORE_PEER_TLS_CERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt
          - name: CORE_PEER_TLS_ENABLED
            value: "true"
          - name: CORE_PEER_TLS_KEY_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key
          - name: CORE_PEER_TLS_ROOTCERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
          - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
            value: net_basic
          - name: CORE_VM_ENDPOINT
            value: unix:///host/var/run/docker.sock
          - name: FABRIC_LOGGING_SPEC
            value: info
          image: hyperledger/fabric-peer
          name: peer1
          ports:
          - containerPort: 7051
          - containerPort: 7053
          resources: {}
          volumeMounts:
          - mountPath: /host/var/run/
            name: peer1-claim0
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
            name: peer1-claim1
          - mountPath: /etc/hyperledger/msp/peer
            name: peer1-claim2
          - mountPath: /etc/hyperledger/msp/users
            name: peer1-claim3
          - mountPath: /etc/hyperledger/configtx
            name: peer1-claim4
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric
        restartPolicy: Always
        volumes:
        - name: peer1-claim0
          persistentVolumeClaim:
            claimName: peer1-claim0
        - name: peer1-claim1
          persistentVolumeClaim:
            claimName: peer1-claim1
        - name: peer1-claim2
          persistentVolumeClaim:
            claimName: peer1-claim2
        - name: peer1-claim3
          persistentVolumeClaim:
            claimName: peer1-claim3
        - name: peer1-claim4
          persistentVolumeClaim:
            claimName: peer1-claim4
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer1-claim0
    name: peer1-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer1-claim1
    name: peer1-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer1-claim2
    name: peer1-claim2
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer1-claim3
    name: peer1-claim3
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: peer1-claim4
    name: peer1-claim4
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
kind: List
metadata: {}

